{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Cloudformation stack to create LAMP servers.  Uses EC2 for the server, RDS for the database, and Secrets Manager to store randomly generated RDS credentials.",
  "Parameters": {
    "EC2Subnets": {
      "Description": "Subnet Ids for EC2 Instances",
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Default": "ami-0915bcb5fa77e4892",
      "ConstraintDescription": "Must be valid subnets ids"
    },
    "AmiId": {
      "Description": "Ami Id (must be Amazon Linux 2)",
      "Type": "AWS::EC2::Image::Id",
      "Default": "ami-0915bcb5fa77e4892",
      "ConstraintDescription": "Must be a valid ami id"
    },
    "SSHPubKey": {
      "Description": "SSH Public Key",
      "Type": "String",
      "AllowedPattern": "ssh-rsa AAAA[0-9A-Za-z+/]+[=]{0,3} ([^@]+@[^@]+)",
      "ConstraintDescription": "Must be valid ssh public key (\"ssh-rsa AAAA[0-9A-Za-z+/]+[=]{0,3} ([^@]+@[^@]+)\")"
    },
    "SSHLocation": {
      "Description": " The IP address range that can be used to SSH to the EC2 instance used to create layers",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },
  "Resources": {
    "TestSecret": {
      "Type": "AWS::SecretsManager::Secret",
      "Properties": {
        "Name": "test",
        "Description": "This is my rds instance secret",
        "GenerateSecretString": {
          "SecretStringTemplate": "{\"username\": \"admin\"}",
          "GenerateStringKey": "password",
          "PasswordLength": 16, 
          "ExcludeCharacters": "\"@/\\"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "RDSSecret"
          }
        ]
      }   
    }, 
    "myWaitHandleRuntime" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle",
      "Properties" : {
      }
    },
    "myWaitHandleVendor" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle",
      "Properties" : {
      }
    },

    "LambdaLayerInstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable ssh access",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }
        ]
      }
    },
    "LAMPRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "RolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "CustomLAMP",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "lambda:*",
                "autoscaling:UpdateAutoScalingGroup"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "LAMPRole"
          }
        ]
      }
    },
    "LAMPInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "LAMPRole"
          }
        ]
      }
    },
    "myWaitConditionRuntime" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "AutoScalingGroup",
      "Properties" : {
        "Handle" : { "Ref" : "myWaitHandleRuntime" },
        "Timeout" : "2000"
      }
    },
    "myWaitConditionVendor" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "AutoScalingGroup",
      "Properties" : {
        "Handle" : { "Ref" : "myWaitHandleVendor" },
        "Timeout" : "2000"
      }
    },
    "MyLaunchTemplateLayerCreator": {
      "Type": "AWS::EC2::LaunchTemplate",
      "Properties": {
        "LaunchTemplateName": "MyLaunchTemplateLayerCreator",
        "LaunchTemplateData": {
          "IamInstanceProfile": {
            "Arn": {
              "Fn::GetAtt": [
                "LAMPInstanceProfile",
                "Arn"
              ]
            }
          },
          "ImageId": {
            "Ref": "AmiId"
          },
          "InstanceType": "t3.small",
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "LambdaLayerInstanceSecurityGroup",
                "GroupId"
              ]
            }
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "#!/bin/bash -xe\n",
                  "export HOME='/home/ec2-user/'\n",
                  "mkdir -p ~ec2-user/.ssh/\n",
                  "echo \"",
                  {
                    "Ref": "SSHPubKey"
                  },
                  "\" > ~ec2-user/.ssh/authorized_keys\n",
                  "yum install -y jq aws-cfn-bootstrap\n",
                  "sudo yum update -y\n",
                  "sudo yum install autoconf bison gcc gcc-c++ libcurl-devel libxml2-devel -y\n",
                  "sudo su - ec2-user\n",
                  "/usr/bin/id \n",
                  "\n",
                  "# Compile OpenSSL v1.0.1 from source, as Amazon Linux uses a newer version than the Lambda Execution Environment, which\n",
                  "# would otherwise produce an incompatible binary.\n",
                  "curl -sL http://www.openssl.org/source/openssl-1.0.1k.tar.gz | tar -xvz\n",
                  "cd openssl-1.0.1k\n",
                  "./config && make && sudo make install\n",
                  "cd ~\n",
                  "\n",
                  "# Download the PHP 7.3.0 source\n",
                  "mkdir -p ~/environment/php-7-bin\n",
                  "curl -sL https://github.com/php/php-src/archive/php-7.3.0.tar.gz | tar -xvz\n",
                  "cd php-src-php-7.3.0\n",
                  "\n",
                  "# Compile PHP 7.3.0 with OpenSSL 1.0.1 support, and install to /home/ec2-user/php-7-bin\n",
                  "./buildconf --force\n",
                  "./configure --prefix=/home/ec2-user/environment/php-7-bin/ --with-openssl=/usr/local/ssl --with-curl --with-zlib\n",
                  "make install\n",
                  "\n",
                  "cd /home/ec2-user/environment/php-7-bin\n",
                  "wget https://raw.githubusercontent.com/aws-samples/php-examples-for-aws-lambda/master/0.1-SimplePhpFunction/bootstrap\n",
                  "# make executable\n",
                  "chmod +x bootstrap\n",
                  "zip -r runtime.zip bin bootstrap\n",
                  "\n",
                  "chown -R ec2-user:ec2-user /home/ec2-user/*\n",
                  "chown -R ec2-user:ec2-user /home/ec2-user/.*\n",
                  "sudo -u ec2-user sh -c 'curl -sS https://getcomposer.org/installer | ./bin/php'\n",
                  "sudo -u ec2-user sh -c './bin/php composer.phar require aws/aws-sdk-php || echo \"Trying again\"'\n",
                  "sudo -u ec2-user sh -c './bin/php composer.phar require aws/aws-sdk-php || echo \"Trying again\"'\n",
                  "sudo -u ec2-user sh -c './bin/php composer.phar require aws/aws-sdk-php || echo \"Trying again\"'\n",
                  "sudo -u ec2-user sh -c './bin/php composer.phar require guzzlehttp/guzzle || echo \"Trying again\"'\n",
                  "sudo -u ec2-user sh -c './bin/php composer.phar require guzzlehttp/guzzle || echo \"Trying again\"'\n",
                  "sudo -u ec2-user sh -c './bin/php composer.phar require guzzlehttp/guzzle || echo \"Trying again\"'\n",
                  "zip -r vendor.zip vendor/\n",
                  "RUNTIME_VERSION=$(aws lambda publish-layer-version --compatible-runtimes provided.al2 --layer-name PHP-example-runtime --zip-file fileb://runtime.zip --region us-east-1 |jq .LayerVersionArn|tr -d \\\")\n",
                  "VENDOR_VERSION=$(aws lambda publish-layer-version --compatible-runtimes provided.al2 --layer-name PHP-example-vendor --zip-file fileb://vendor.zip --region us-east-1 |jq .LayerVersionArn|tr -d \\\")\n",
                  "curl -X PUT -H 'Content-Type:' --data-binary \"{\\\"Status\\\" : \\\"SUCCESS\\\",\\\"Reason\\\" : \\\"Configuration Complete\\\",\\\"UniqueId\\\" : \\\"RUNTIME_VERSION\\\",\\\"Data\\\" : \\\"${RUNTIME_VERSION}\\\"}\" \"",
                  { "Ref" : "myWaitHandleRuntime" },
                  "\"\n",
                  "curl -X PUT -H 'Content-Type:' --data-binary \"{\\\"Status\\\" : \\\"SUCCESS\\\",\\\"Reason\\\" : \\\"Configuration Complete\\\",\\\"UniqueId\\\" : \\\"VENDOR_VERSION\\\",\\\"Data\\\" : \\\"${VENDOR_VERSION}\\\"}\" \"",
                  { "Ref" : "myWaitHandleVendor" },
                  "\"\n",
                  "aws autoscaling update-auto-scaling-group --auto-scaling-group-name LambdaLayerASG --desired-capacity 0 --region us-east-1\n"
                ]
              ]
            }
          }
        }
      }
    },
    "AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AutoScalingGroupName": "LambdaLayerASG",
        "MinSize": "0",
        "MaxSize": "1",
        "DesiredCapacity": "1",
        "LaunchTemplate": {
          "LaunchTemplateId": {
            "Ref": "MyLaunchTemplateLayerCreator"
          },
          "Version": {
            "Fn::GetAtt": [
              "MyLaunchTemplateLayerCreator",
              "LatestVersionNumber"
            ]
          }
        },
        "VPCZoneIdentifier": {
          "Ref": "EC2Subnets"
        }
      }
    }
  },
  "Outputs" : {
    "WaitDataOutputsRuntime" : {
      "Description": "Runtime Layer Data",
      "Value" : { "Fn::GetAtt" : [ "myWaitConditionRuntime", "Data" ]}
    },
    "WaitDataOutputsVendor" : {
      "Description": "Vendor Layer Data",
      "Value" : { "Fn::GetAtt" : [ "myWaitConditionVendor", "Data" ]}
    }

  }

}
